blocked_opponent_shots = numeric(),
takeaways = numeric(),
giveaways = numeric(),
first_shots = integer(),
second_shots = integer(),
third_shots = integer(),
overtime_shots = integer(),
shootout_shots = integer(),
total_shots = integer(),
first_scoring = integer(),
second_scoring = integer(),
third_scoring = integer(),
overtime_scoring = integer(),
shootout_scoring = character(),
total_scoring = integer(),
winner = character(),
game_id = numeric()
)
#' @title process_boxscore
#' @description process_boxscore: the code for processing box score data into a format that makes sense
#'
#' @param data the raw data from the game that you're interested in
#' @importFrom dplyr mutate bind_rows filter row_number select case_when pull starts_with ends_with
#' @importFrom tidyr pivot_wider separate fill
#' @importFrom stringr str_replace str_replace_all str_extract str_extract_all str_detect str_trim
#' @importFrom janitor clean_names
#' @import rvest
#' @import jsonlite
#' @export
#' @examples \dontrun{
#'   boxscore <- process_boxscore(data = df[[1]])
#' }
process_boxscore <- function(data) {
df <- data[[max(length(data))]]
score <- data[[max(length(data)) - 2]]
shot <- data[[max(length(data)) - 1]]
if (ncol(score) == 5) {
score <- score %>%
janitor::clean_names() %>%
dplyr::rename("team" = "scoring",
"first_scoring" = "x1st",
"second_scoring" = "x2nd",
"third_scoring" = "x3rd",
"total_scoring" = "t")
} else if (ncol(score) == 6) {
score <- score %>%
janitor::clean_names() %>%
dplyr::rename("team" = "scoring",
"first_scoring" = "x1st",
"second_scoring" = "x2nd",
"third_scoring" = "x3rd",
"overtime_scoring" = "ot",
"total_scoring" = "t")
} else if (ncol(score) == 7) {
score <- score %>%
janitor::clean_names() %>%
dplyr::rename("team" = "scoring",
"first_scoring" = "x1st",
"second_scoring" = "x2nd",
"third_scoring" = "x3rd",
"overtime_scoring" = "ot",
"shootout_scoring" = "so",
"total_scoring" = "t") %>%
dplyr::mutate(
shootout_scoring = stringr::str_replace(.data$shootout_scoring, "[0-9] ", ""),
shootout_scoring = stringr::str_replace(.data$shootout_scoring, "\\(", ""),
shootout_scoring = stringr::str_replace(.data$shootout_scoring, "\\)", ""),
shootout_rep = stringr::str_replace(.data$shootout_scoring, " - ", ",")) %>%
dplyr::select(-c(.data$shootout_scoring)) %>%
tidyr::separate(.data$shootout_rep, into = c("shootout_scoring", "shootout_shots"),
sep = ",", remove = TRUE)
}
if (ncol(shot) == 5) {
shot <- shot %>%
janitor::clean_names() %>%
dplyr::rename(
"team" = "shots",
"first_shots" = "x1st",
"second_shots" = "x2nd",
"third_shots" = "x3rd",
"total_shots" = "t")
} else if (ncol(shot) != 5) {
shot <- shot %>%
janitor::clean_names() %>%
dplyr::rename(
"team" = "shots",
"first_shots" = "x1st",
"second_shots" = "x2nd",
"third_shots" = "x3rd",
"overtime_shots" = "ot",
"total_shots" = "t")
}
df <- df %>%
janitor::clean_names() %>%
tidyr::pivot_longer(cols = 2:3) %>%
tidyr::pivot_wider(names_from = .data$team_stats) %>%
janitor::clean_names() %>%
tidyr::separate(
.data$power_plays,
into = c("successful_power_play", "power_play_opportunities"),
sep = " / ") %>%
dplyr::mutate_at(
vars(.data$successful_power_play,
.data$power_play_opportunities,
.data$power_play_percent,
.data$penalty_minutes,
.data$faceoff_percent,
.data$blocked_opponent_shots,
.data$takeaways,
.data$giveaways), as.numeric) %>%
dplyr::rename("team" = "name")
s <- shot %>%
dplyr::left_join(score, by = c("team")) %>%
dplyr::mutate(team = tolower(.data$team))
df <- df %>%
dplyr::left_join(s, by = c("team"))
df <- dplyr::bind_rows(df, boxscore)
df <- df %>%
dplyr::mutate(
winner = ifelse(
.data$total_scoring == max(.data$total_scoring, na.rm = TRUE), "Yes", "No"))
return(df)
}
#' @title load_boxscore
#' @description load_boxscore: loads the boxscore and shot/score data for a game into one data frame through just one function
#'
#' @param game_id The unique ID code for the game that you are interested in viewing the data for
#' @import rvest
#' @import janitor
#' @import httr
#' @import stringr
#' @import jsonlite
#' @export
#' @examples
#' \dontrun{
#'   boxscore <- load_boxscore(game_id = 268078)
#' }
load_boxscore <- function(game_id = 268078) {
y <- game_id
# load raw data from API
df <- load_raw_data(game_id = game_id)
# turn raw data into a boxscore format
df <- process_boxscore(data = df)
df <- df %>%
dplyr::mutate(game_id = y) %>%
dplyr::select(
.data$team, .data$game_id, .data$winner, .data$total_scoring,
.data$first_scoring, .data$second_scoring, .data$third_scoring,
.data$overtime_scoring,
.data$shootout_scoring,
.data$total_shots, .data$first_shots,
.data$second_shots, .data$third_shots,
.data$overtime_shots, .data$shootout_shots,
.data$blocked_opponent_shots,
.data$successful_power_play,
.data$power_play_opportunities,
.data$power_play_percent,
.data$faceoff_percent,
.data$penalty_minutes,
.data$takeaways,
.data$giveaways)
return(df)
}
#' @title load_game
#' @description load_game: loads boxscore/pbp data into a list to load both at once for a given game
#'
#' @param game_id The unique ID code for the game that you are interested in viewing the data for
#' @import rvest
#' @import janitor
#' @import httr
#' @import stringr
#' @import jsonlite
#' @export
#' @examples
#' \dontrun{
#'   game_data <- load_game(game_id = 268078)
#' }
load_game <- function(game_id = 268078) {
# returns both boxscore and pbp data in a single list
box <- load_boxscore(game_id = game_id)
pbp <- load_pbp(game_id = game_id)
game <- list(box, pbp)
return(game)
}
home_state_changes <- pbp %>%
dplyr::filter((.data$event == "PP Goal" & stringr::str_detect(.data$team, .data$away_team)) |
(.data$event == "Penalty" & stringr::str_detect(.data$team, .data$home_team))) %>%
dplyr::select(.data$event, .data$sec_from_start, .data$power_play_seconds) %>%
dplyr::mutate(event = ifelse(.data$event == "Penalty",1,2),
prev.event = lag(.data$event),
prev.time = lag(.data$sec_from_start),
prev.length = lag(.data$power_play_seconds))
home_pen_mat <- apply(home_state_changes,
1,
FUN = function(x) {
#Creates a -1 for duration of penalty and 0s surrounding it
if(x[1] == 1 & (x[2] + x[3]) < (max(pbp$period_id, na.rm = TRUE) * 1200-1)){
c( rep( 0, length( 0:x[2] )),
rep( -1, x[3]),
rep(0, length((x[2]+x[3] + 1):(max(pbp$period_id, na.rm = TRUE)*1200-1)))
)
#Creates a -1 for duration of penalty and 0s before (for end of game penalties)
} else if (x[1] == 1 & (x[2] == (max(pbp$period_id, na.rm = TRUE)*1200))) {
c( rep( 0, length( 0:x[2] )))
} else if(x[1] == 1 & (x[2]+x[3]) >= (max(pbp$period_id, na.rm = TRUE)*1200-1)) {
c( rep( 0, length( 0:x[2] )),
rep(-1, max(pbp$period_id, na.rm = TRUE)*1200-1-x[2] )
)
#Creates a +1 from time power play goal is scored to end of penalty to handle skater coming back on
} else if( x[1] == 2 & (x[2] %in% ifelse(!is.na(x[5]) & !is.na(x[6]) & x[2] != x[5], x[5]:(x[5]+x[6]),-1 )) ) {
c( rep( 0, length( 0:(x[2]) )),
rep( 1, length( (x[2]+1):(x[6]-(x[2]-x[5])))),
rep(0, length((x[6]-(x[2]-x[5])):(max(pbp$period_id, na.rm = TRUE)*1200-1)))
)
# Creates all zeros if event doesn't effect strength
} else {
rep(0, length(0:(max(pbp$period_id)*1200-1)))
}
})
devtools::install_github(repo = "BenHowell71/fastRhockey")
library(fastRhockey)
library(tidyverse)
game_data <- read.csv("phf_meta_data.csv")
pbp_games <- game_data %>%
dplyr::filter(has_play_by_play == TRUE) %>%
dplyr::select(game_id) %>%
dplyr::mutate(
order = row_number()
)
pbp <- list()
for (k in 1:nrow(pbp_games)) {
use <- pbp_games %>%
dplyr::filter(order == k)
g <- use$game_id
pbp_data <- load_pbp(game_id = g)
pbp[[k]] <- pbp_data
print(paste0("Game ID: ", g, "; Game #: ", k))
}
game_id <- g
x <- g
# load raw data in from the api
df <- phf_game_data(game_id = game_id)
# transform raw data into a pbp dataframe
pbp <- pbp_data(data = df, game_id = game_id)
# some last minute stuff
pbp <- pbp %>%
dplyr::filter(! is.na(.data$description)) %>%
dplyr::mutate(
game_id = x,
event_no = dplyr::row_number(),
power_play_seconds = ifelse(is.na(.data$power_play_seconds), 0,
.data$power_play_seconds))
# figuring out how many skaters are on the ice at a single time
away_state_changes <- pbp %>%
dplyr::filter((.data$event == "PP Goal" & stringr::str_detect(.data$team, .data$home_team)) |
(.data$event == "Penalty" & stringr::str_detect(.data$team, .data$away_team))) %>%
dplyr::select(.data$event, .data$sec_from_start, .data$power_play_seconds) %>%
dplyr::mutate(event = ifelse(.data$event == "Penalty", 1, 2),
prev.event = lag(.data$event),
prev.time = lag(.data$sec_from_start),
prev.length = lag(.data$power_play_seconds))
away_pen_mat <- apply(away_state_changes,
1,
FUN = function(x) {
#Creates a -1 for duration of penalty and 0s surrounding it
if(x[1] == 1 & x[2]+x[3] < (max(pbp$period_id, na.rm = TRUE)*1200-1)){
c( rep( 0, length( 0:x[2] )),
rep( -1, x[3]),
rep(0, length((x[2]+x[3] + 1):(max(pbp$period_id, na.rm = TRUE)*1200-1)))
)
#Creates a -1 for duration of penalty and 0s before (for end of game penalties)
} else if (x[1] == 1 & (x[2] == (max(pbp$period_id, na.rm = TRUE)*1200))) {
c( rep( 0, length( 0:x[2] )))
} else if(x[1] == 1 & x[2]+x[3] >= (max(pbp$period_id, na.rm = TRUE)*1200-1)) {
c( rep( 0, length( 0:x[2] )),
rep(-1, max(pbp$period_id, na.rm = TRUE)*1200-1-x[2] )
)
#Creates a +1 from time power play goal is scored to end of penalty to handle skater coming back on
} else if( x[1] == 2 & (x[2] %in% ifelse(!is.na(x[5]) & !is.na(x[6]) & x[2] != x[5], x[5]:(x[5]+x[6]),-1 )) ) {
c( rep( 0, length( 0:(x[2]) )),
rep( 1, length( (x[2]+1):(x[6]-(x[2]-x[5])))),
rep(0, length((x[6]-(x[2]-x[5])):(max(pbp$period_id, na.rm = TRUE)*1200-1)))
)
# Creates all zeros if event doesnt effect strength
} else {
rep(0, length(0:(max(pbp$period_id, na.rm = TRUE)*1200-1)))
}
})
#creates vector for skaters
away_skaters <- 5 + apply(away_pen_mat, 1, sum)
away_skaters <- as.data.frame(away_skaters) %>%
tibble::rownames_to_column("sec_from_start")%>%
dplyr::mutate(sec_from_start = as.numeric(.data$sec_from_start))
home_state_changes <- pbp %>%
dplyr::filter((.data$event == "PP Goal" & stringr::str_detect(.data$team, .data$away_team)) |
(.data$event == "Penalty" & stringr::str_detect(.data$team, .data$home_team))) %>%
dplyr::select(.data$event, .data$sec_from_start, .data$power_play_seconds) %>%
dplyr::mutate(event = ifelse(.data$event == "Penalty",1,2),
prev.event = lag(.data$event),
prev.time = lag(.data$sec_from_start),
prev.length = lag(.data$power_play_seconds))
home_pen_mat <- apply(home_state_changes,
1,
FUN = function(x) {
#Creates a -1 for duration of penalty and 0s surrounding it
if(x[1] == 1 & (x[2] + x[3]) < (max(pbp$period_id, na.rm = TRUE) * 1200-1)){
c( rep( 0, length( 0:x[2] )),
rep( -1, x[3]),
rep(0, length((x[2]+x[3] + 1):(max(pbp$period_id, na.rm = TRUE)*1200-1)))
)
#Creates a -1 for duration of penalty and 0s before (for end of game penalties)
} else if (x[1] == 1 & (x[2] == (max(pbp$period_id, na.rm = TRUE)*1200))) {
c( rep( 0, length( 0:x[2] )))
} else if(x[1] == 1 & (x[2]+x[3]) >= (max(pbp$period_id, na.rm = TRUE)*1200-1)) {
c( rep( 0, length( 0:x[2] )),
rep(-1, max(pbp$period_id, na.rm = TRUE)*1200-1-x[2] )
)
#Creates a +1 from time power play goal is scored to end of penalty to handle skater coming back on
} else if( x[1] == 2 & (x[2] %in% ifelse(!is.na(x[5]) & !is.na(x[6]) & x[2] != x[5], x[5]:(x[5]+x[6]),-1 )) ) {
c( rep( 0, length( 0:(x[2]) )),
rep( 1, length( (x[2]+1):(x[6]-(x[2]-x[5])))),
rep(0, length((x[6]-(x[2]-x[5])):(max(pbp$period_id, na.rm = TRUE)*1200-1)))
)
# Creates all zeros if event doesn't effect strength
} else {
rep(0, length(0:(max(pbp$period_id)*1200-1)))
}
})
View(home_pen_mat)
View(away_pen_mat)
typeof(away_pen_mat)
typeof(home_pen_mat)
if (typeof(away_pen_mat) == "list") {
"Hit"
}
if (typeof(away_pen_mat) == "list") {
"Hit"
}
if (typeof(away_pen_mat) == "list") {
print("Hit")
}
typeof(away_pen_mat)
if (typeof(away_pen_mat) == "list") {
print("Hit")
} else if (typeof(away_pen_mat) == "double") {
"two"
}
matrix(unlist(home_pen_mat), ncol = 5, byrow = TRUE)
matrix(unlist(home_pen_mat), ncol = 6, byrow = TRUE)
matrix(unlist(home_pen_mat), ncol = 6)
if (typeof(home_pen_mat) == "list") {
home_pen_mat <- matrix(unlist(home_pen_mat), ncol = nrow(home_state_changes), byrow = TRUE)
}
#creates vector for skaters
home_skaters <- 5 + apply(home_pen_mat, 1, sum)
home_skaters <- as.data.frame(home_skaters) %>%
tibble::rownames_to_column("sec_from_start")%>%
dplyr::mutate(sec_from_start = as.numeric(.data$sec_from_start))
devtools::install_github(repo = "BenHowell71/fastRhockey")
devtools::install_github(repo = "BenHowell71/fastRhockey")
devtools::install_github(repo = "BenHowell71/fastRhockey")
library(fastRhockey)
library(tidyverse)
game_data <- read.csv("phf_meta_data.csv")
pbp_games <- game_data %>%
dplyr::filter(has_play_by_play == TRUE) %>%
dplyr::select(game_id) %>%
dplyr::mutate(
order = row_number()
)
pbp <- list()
rm(list = ls())
library(fastRhockey)
library(tidyverse)
game_data <- read.csv("phf_meta_data.csv")
pbp_games <- game_data %>%
dplyr::filter(has_play_by_play == TRUE) %>%
dplyr::select(game_id) %>%
dplyr::mutate(
order = row_number()
)
pbp <- list()
rm(pbp)
p <- list()
for (k in 1:nrow(pbp_games)) {
use <- pbp_games %>%
dplyr::filter(order == k)
g <- use$game_id
pbp_data <- load_pbp(game_id = g)
p[[k]] <- pbp_data
print(paste0("Game ID: ", g, "; Game #: ", k))
}
rm(list = ls())
devtools::install_github(repo = "BenHowell71/fastRhockey")
library(fastRhockey)
library(tidyverse)
game_data <- read.csv("phf_meta_data.csv")
pbp_games <- game_data %>%
dplyr::filter(has_play_by_play == TRUE) %>%
dplyr::select(game_id) %>%
dplyr::mutate(
order = row_number()
)
p <- list()
for (k in 1:nrow(pbp_games)) {
use <- pbp_games %>%
dplyr::filter(order == k)
g <- use$game_id
pbp_data <- load_pbp(game_id = g)
p[[k]] <- pbp_data
print(paste0("Game ID: ", g, "; Game #: ", k))
}
rm(list = ls())
library(fastRhockey)
library(tidyverse)
game_data <- read.csv("phf_meta_data.csv")
pbp_games <- game_data %>%
dplyr::filter(has_play_by_play == TRUE) %>%
dplyr::select(game_id) %>%
dplyr::mutate(
order = row_number()
)
p <- list()
for (k in 1:nrow(pbp_games)) {
use <- pbp_games %>%
dplyr::filter(order == k)
g <- use$game_id
pbp_data <- load_pbp(game_id = g)
p[[k]] <- pbp_data
print(paste0("Game ID: ", g, "; Game #: ", k))
}
dim(away_pen_mat)
is.null(l)
rm(list = ls())
devtools::install_github(repo = "BenHowell71/fastRhockey")
library(fastRhockey)
library(tidyverse)
game_data <- read.csv("phf_meta_data.csv")
pbp_games <- game_data %>%
dplyr::filter(has_play_by_play == TRUE) %>%
dplyr::select(game_id) %>%
dplyr::mutate(
order = row_number()
)
p <- list()
for (k in 1:nrow(pbp_games)) {
use <- pbp_games %>%
dplyr::filter(order == k)
g <- use$game_id
pbp_data <- load_pbp(game_id = g)
p[[k]] <- pbp_data
print(paste0("Game ID: ", g, "; Game #: ", k))
}
devtools::install_github(repo = "BenHowell71/fastRhockey")
library(fastRhockey)
library(tidyverse)
game_data <- read.csv("phf_meta_data.csv")
pbp_games <- game_data %>%
dplyr::filter(has_play_by_play == TRUE) %>%
dplyr::select(game_id) %>%
dplyr::mutate(
order = row_number()
)
p <- list()
for (k in 1:nrow(pbp_games)) {
use <- pbp_games %>%
dplyr::filter(order == k)
g <- use$game_id
pbp_data <- load_pbp(game_id = g)
p[[k]] <- pbp_data
print(paste0("Game ID: ", g, "; Game #: ", k))
}
a <- Sys.time()
time <- (Sys.time() - a)
time
rm(list = ls())
devtools::install_github(repo = "BenHowell71/fastRhockey")
library(fastRhockey)
library(tidyverse)
game_data <- read.csv("phf_meta_data.csv")
pbp_games <- game_data %>%
dplyr::filter(has_play_by_play == TRUE) %>%
dplyr::select(game_id) %>%
dplyr::mutate(
order = row_number()
)
p <- list()
a <- Sys.time()
for (k in 1:nrow(pbp_games)) {
use <- pbp_games %>%
dplyr::filter(order == k)
g <- use$game_id
pbp_data <- load_pbp(game_id = g)
p[[k]] <- pbp_data
print(paste0("Game ID: ", g, "; Game #: ", k))
}
(Sys.time() - a)
g
109/125
for (k in 111:nrow(pbp_games)) {
use <- pbp_games %>%
dplyr::filter(order == k)
g <- use$game_id
pbp_data <- load_pbp(game_id = g)
p[[k]] <- pbp_data
print(paste0("Game ID: ", g, "; Game #: ", k))
}
pbp_repo <- dplyr::bind_rows(p)
table(pbp_repo$game_id)
write.csv(pbp_repo, file = "play_by_play1.csv", row.names = FALSE)
15243 / 124
gc()
